#!/bin/sh

# SPDX-License-Identifier: GPL-2.0
# This is not an autoconf generated configure

# Output file which is input to Makefile
CONFIG_FINAL=config.mk
CONFIG=".${CONFIG}.tmp"

# Make a temp directory in build tree
TMPDIR=$(mktemp -d config.XXXXXX)
trap 'status=$?; rm -rf $TMPDIR; rm -f $CONFIG; exit $status' EXIT HUP INT QUIT TERM

ARCH_INCLUDES=

check_toolchain()
{
    local clang_version

    : ${PKG_CONFIG:=pkg-config}
    : ${CC=gcc}
    : ${CLANG=clang}
    : ${BPFTOOL=/usr/sbin/bpftool}

    for TOOL in $PKG_CONFIG $CC $CLANG $BPFTOOL; do
        if [ ! $(command -v ${TOOL} 2>/dev/null) ]; then
            echo
            echo "*** ERROR: Cannot find tool ${TOOL}"
            echo
            exit 1
        fi
    done

    clang_version=$($CLANG --version | sed -n '/clang version/ s/^.*clang version // p')
    echo "clang: $clang_version"

    clang_major_version=$(echo "$clang_version" | sed 's/\..*$//')
    if [ "$clang_major_version" -lt "11" ]; then
        echo
        echo "*** ERROR: Need clang version >= 11, found $clang_major_version ($clang_version)"
        echo
        exit 1
    fi

    ARCH_NAME=$($CC -print-multiarch 2>/dev/null)
    if [ -z "$ARCH_INCLUDES" ] && [ -n "$ARCH_NAME" ]; then
        for dir in $(echo | $CC -Wp,-v -E - 2>&1 | grep '^ '); do
            local idir
            idir="${dir}/${ARCH_NAME}"
            [ -d "$idir" ] && ARCH_INCLUDES="-I${idir} $ARCH_INCLUDES"
        done
    fi

    echo "PKG_CONFIG:=${PKG_CONFIG}" >>$CONFIG
    echo "CC:=${CC}" >>$CONFIG
    echo "CLANG:=${CLANG}" >>$CONFIG
    echo "LLC:=${LLC}" >>$CONFIG
    echo "BPFTOOL:=${BPFTOOL}" >>$CONFIG
    echo "ARCH_INCLUDES:=${ARCH_INCLUDES}" >>$CONFIG
}

check_libbpf()
{
    if ${PKG_CONFIG} libbpf --exists; then

        LIBBPF_CFLAGS=$(${PKG_CONFIG} libbpf --cflags)
        LIBBPF_LDLIBS=$(${PKG_CONFIG} libbpf --libs)

        echo CFLAGS += $LIBBPF_CFLAGS >>$CONFIG
        echo LDLIBS += $LIBBPF_LDLIBS >>$CONFIG
        echo yes
    else
        echo missing
        echo
        echo "*** ERROR - Install missing eBPF helper library"
        echo ""
        echo " On RHEL/Fedora install:"
        echo "   dnf install libbpf-devel"
        echo " On Debian/Ubuntu install:"
        echo "   apt install libbpf-dev"
        echo
        exit 1
    fi
}

check_errno()
{
    local compile_err

    # Clang BPF-progs when compiled with proper -target bpf cause
    # build dependencies to include <gnu/stubs-32.h> file.

    cat >$TMPDIR/errno_test.c <<EOF
#include <errno.h>
int dummy(void *ctx) { return 0; }
EOF

    compile_err=$($CLANG -target bpf ${ARCH_INCLUDES} -c $TMPDIR/errno_test.c -o $TMPDIR/errno_test.o 2>&1)
    if [ "$?" -eq "0" ]; then
        echo yes
    else
        echo failed
        echo
        echo "*** ERROR - Clang BPF program cannot include <errno.h>"
        echo "          - Install missing userspace header file"
        echo ""
        echo "Compile error: $compile_err"
        echo ""
        echo " On RHEL/Fedora install:"
        echo "   dnf install glibc-devel.i686"
        echo " On Debian/Ubuntu install:"
        echo "   apt install libc6-dev-i386"
        echo
        exit 1
    fi
}

echo "# Generated config" >$CONFIG

check_toolchain

echo -n "libbpf support: "
check_libbpf

echo -n "errno support: "
check_errno

mv $CONFIG $CONFIG_FINAL
echo "config.mk generated"
